{"paragraphs":[{"text":"def example = 2      // evaluated when called\nval example = 2      // evaluated immediately\nlazy val example = 2 // evaluated once when needed\n\ndef square(x: Double)    // call by value\ndef square(x: => Double) // call by name\ndef myFct(bindings: Int*) = { ... } // bindings is a sequence of int, containing a varying # of arguments","user":"anonymous","dateUpdated":"2018-10-16T11:58:24+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"example: Int\nexample: Int = 2\nexample: Int = <lazy>\n<console>:4: error: illegal start of statement\ndef myFct(bindings: Int*) = { ... } // bindings is a sequence of int, containing a varying # of arguments\n                              ^\n"}]},"apps":[],"jobName":"paragraph_1539683296227_65361726","id":"20181016-114816_795465761","dateCreated":"2018-10-16T11:48:16+0200","dateStarted":"2018-10-16T11:58:24+0200","dateFinished":"2018-10-16T11:58:24+0200","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10844"},{"text":"//Higher order functions\n    \n    //sum() returns a function that takes two integers and returns an integer  \n    def sum(f: Int => Int): (Int, Int) => Int = {  \n      def sumf(a: Int, b: Int): Int = {...}  \n      sumf  \n    }\n    \n    \n    // same as above. Its type is (Int => Int) => (Int, Int) => Int  \n    def sum(f: Int => Int)(a: Int, b: Int): Int = { ... } \n    \n    // Called like this\n    sum((x: Int) => x * x * x)          // Anonymous function, i.e. does not have a name  \n    sum(x => x * x * x)                 // Same anonymous function with type inferred\n\n    def cube(x: Int) = x * x * x  \n    sum(x => x * x * x)(1, 10) // sum of cubes from 1 to 10\n    sum(cube)(1, 10)           // same as above\n    \n    \n    //más...\n    val salaries = Seq(20000, 70000, 40000)\nval doubleSalary = (x: Int) => x * 2\nval newSalaries = salaries.map(doubleSalary) // List(40000, 140000, 80000)\n\nval salaries = Seq(20000, 70000, 40000)\nval newSalaries = salaries.map(x => x * 2) // List(40000, 140000, 80000)\n\nval salaries = Seq(20000, 70000, 40000)\nval newSalaries = salaries.map(_ * 2)\n","user":"anonymous","dateUpdated":"2018-10-16T13:30:56+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539683904061_-657159251","id":"20181016-115824_579257883","dateCreated":"2018-10-16T11:58:24+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10845"},{"text":"//Parameteos x defecto\ndef log(message: String, level: String = \"INFO\") = println(s\"$level: $message\")\n\nlog(\"System starting\")  // prints INFO: System starting\nlog(\"User not found\", \"WARNING\")  // prints WARNING: User not found","user":"anonymous","dateUpdated":"2018-10-16T13:32:29+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689540629_-972565400","id":"20181016-133220_172693869","dateCreated":"2018-10-16T13:32:20+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10846"},{"text":"//LOOPS\ndef power(x: Double, exp: Int): Double = {\n  var r = 1.0\n  var i = exp\n  while (i > 0) { r = r * x; i = i - 1 }\n  r\n}\n\nfor (i <- 1 until 3) { System.out.print(i + \" \") }\n\n\nfor (i <- 1 until 3; j <- \"abc\") println(s\"$i $j\")\n\n(1 until 3) foreach (i => \"abc\" foreach (j => println(s\"$i $j\")))","user":"anonymous","dateUpdated":"2018-10-16T13:37:24+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689783103_1048597482","id":"20181016-133623_1037789798","dateCreated":"2018-10-16T13:36:23+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10847"},{"text":"//curriyng\ndef f(a: Int, b: Int): Int = {1} // uncurried version (type is (Int, Int) => Int)\ndef f(a: Int)(b: Int): Int = {1} // curried version (type is Int => Int => Int)","user":"anonymous","dateUpdated":"2018-10-16T12:14:44+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"f: (a: Int, b: Int)Int\nf: (a: Int)(b: Int)Int\n"}]},"apps":[],"jobName":"paragraph_1539684737838_-472594802","id":"20181016-121217_1480297339","dateCreated":"2018-10-16T12:12:17+0200","dateStarted":"2018-10-16T12:14:44+0200","dateFinished":"2018-10-16T12:14:45+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10848"},{"text":"//Funciones II\n(x: Int) => x + 1\n\nval addOne = (x: Int) => x + 1\nprintln(addOne(1)) // 2\n\nval add = (x: Int, y: Int) => x + y\nprintln(add(1, 2)) // 3\n\nval getTheAnswer = () => 42\nprintln(getTheAnswer()) // 42\n","user":"anonymous","dateUpdated":"2018-10-16T13:27:50+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689228846_-1244476512","id":"20181016-132708_1507816135","dateCreated":"2018-10-16T13:27:08+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10849"},{"text":"//BLocks\nprintln({\n  val x = 1 + 1\n  x + 1\n}) // 3","user":"anonymous","dateUpdated":"2018-10-16T13:26:45+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689182429_640328367","id":"20181016-132622_1922819443","dateCreated":"2018-10-16T13:26:22+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10850"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689205412_-1984218170","id":"20181016-132645_703540377","dateCreated":"2018-10-16T13:26:45+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10851"},{"text":"//POO\nclass MyClass(x: Int, y: Int) {           // Defines a new type MyClass with a constructor  \n  require(y > 0, \"y must be positive\")    // precondition, triggering an IllegalArgumentException if not met  \n  def this (x: Int) = this(x,1)            // auxiliary constructor   \n  def nb1 = x                             // public method computed every time it is called  \n  def nb2 = y  \n  private def test(a: Int): Int = {1} // private method  \n  val nb3 = x + y                         // computed only once  \n  override def toString =                 // overridden method  \n      member1 + \", \" + member2 \n}\n\nnew MyClass(1, 2) // creates a new object of type","user":"anonymous","dateUpdated":"2018-10-16T12:16:17+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:21: error: not found: value member1\n             member1 + \", \" + member2\n             ^\n<console>:21: error: not found: value member2\n             member1 + \", \" + member2\n                              ^\n"}]},"apps":[],"jobName":"paragraph_1539684750704_64390552","id":"20181016-121230_980469848","dateCreated":"2018-10-16T12:12:30+0200","dateStarted":"2018-10-16T12:16:17+0200","dateFinished":"2018-10-16T12:16:17+0200","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:10852"},{"text":"//case classes\ncase class Point(x: Int, y: Int)\n\nval point = Point(1, 2)\nval anotherPoint = Point(1, 2)\nval yetAnotherPoint = Point(2, 2)\n","user":"anonymous","dateUpdated":"2018-10-16T13:29:34+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689353219_-1717516303","id":"20181016-132913_1322881963","dateCreated":"2018-10-16T13:29:13+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10853"},{"text":"//FOR... sobre colecciones de objetos\n\ncase class User(name: String, age: Int)\n\nval userBase = List(User(\"Travis\", 28),\n  User(\"Kelly\", 33),\n  User(\"Jennifer\", 44),\n  User(\"Dennis\", 23))\n\nval twentySomethings = for (user <- userBase if (user.age >=20 && user.age < 30))\n  yield user.name  // i.e. add this to a list\n\ntwentySomethings.foreach(name => println(name))  // prints Travis Dennis","user":"anonymous","dateUpdated":"2018-10-16T13:31:42+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689487834_2032285663","id":"20181016-133127_796808764","dateCreated":"2018-10-16T13:31:27+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10854"},{"text":"//Objetos\nobject IdFactory {\n  private var counter = 0\n  def create(): Int = {\n    counter += 1\n    counter\n  }\n}\n\nval newId: Int = IdFactory.create()\nprintln(newId) // 1\nval newerId: Int = IdFactory.create()\nprintln(newerId) // 2\n\n","user":"anonymous","dateUpdated":"2018-10-16T13:28:42+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539689305763_-1459512829","id":"20181016-132825_716600877","dateCreated":"2018-10-16T13:28:25+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10855"},{"text":"//POO 2\ntrait Componente1 {\n    def componer1(x:Int) = x * x \n}\n\ntrait Componente2 {\n    def componer2(x:Int) = x * x \n}\n\nclass Persona(nom:String,ed:Int) extends Componente1 with Componente2 {\n    require(nom.length > 0, \"nombre debe llevar algo\")\n    \n    private val nombre: String = nom\n    private val edad: Int = ed\n    \n    def getEdad():Int = this.edad\n    def getNombre():String = this.nombre\n     \n    def this(nombre:String) = this(nombre,67)\n    def saludar():Unit = {\n        println(s\"Hola ${this.nombre}\")\n    }\n}\nval p:Persona = new Persona(\"Ricardo\",56)\n\nprintln(s\"Me llamo ${p.getNombre}\")\np.saludar()\np.componer1(10)\np.componer2(5)\n\n","user":"anonymous","dateUpdated":"2018-10-16T12:37:37+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined trait Componente1\ndefined trait Componente2\ndefined class Persona\np: Persona = Persona@206eb381\nMe llamo Ricardo\nHola Ricardo\nres181: Int = 100\nres182: Int = 25\n"}]},"apps":[],"jobName":"paragraph_1539684927969_401296671","id":"20181016-121527_170156400","dateCreated":"2018-10-16T12:15:27+0200","dateStarted":"2018-10-16T12:37:37+0200","dateFinished":"2018-10-16T12:37:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10856"},{"text":"//match\nval myMap = Map(\"a\" -> 42, \"b\" -> 43)\ndef getMapValue(s: String): String = {\n  /*\n  myMap get s match {\n    case Some(nb) => \"Value found: \" + nb\n    case None => \"No value found\"\n  }\n  */\n  myMap.get(s) match {\n      case Some(nb) => \"Valor encontrado: \" + nb\n      case None => \"Valor no hallado\"\n  }\n}\ngetMapValue(\"a\")  // \"Value found: 42\"\ngetMapValue(\"c\")  // \"No value found\"","user":"anonymous","dateUpdated":"2018-10-16T12:51:13+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"myMap: scala.collection.immutable.Map[String,Int] = Map(a -> 42, b -> 43)\ngetMapValue: (s: String)String\nres189: String = Valor encontrado: 42\nres190: String = Valor no hallado\n"}]},"apps":[],"jobName":"paragraph_1539685196241_-1684459070","id":"20181016-121956_283061463","dateCreated":"2018-10-16T12:19:56+0200","dateStarted":"2018-10-16T12:51:13+0200","dateFinished":"2018-10-16T12:51:14+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10857"},{"text":"//colecciones\nval fruitList = List(\"apples\", \"oranges\", \"pears\")\n// Alternative syntax for lists\nval fruit = \"apples\" :: (\"oranges\" :: (\"pears\" :: Nil)) // parens optional, :: is right-associative\nfruit.head   // \"apples\"\nfruit.tail   // List(\"oranges\", \"pears\")\nval empty = List()\nval empty = Nil\n\nval nums = Vector(\"louis\", \"frank\", \"hiromi\")\nnums(1)                     // element at index 1, returns \"frank\", complexity O(log(n))\nnums.updated(2, \"helena\")   // new vector with a different string at index 2, complexity O(log(n))\n    \nval fruitSet = Set(\"apple\", \"banana\", \"pear\", \"banana\")\nfruitSet.size    // returns 3: there are no duplicates, only one banana\n\nval r: Range = 1 until 5 // 1, 2, 3, 4\nval s: Range = 1 to 5    // 1, 2, 3, 4, 5\n1 to 10 by 3  // 1, 4, 7, 10\n6 to 1 by -2  // 6, 4, 2\n\nval s = (1 to 6).toSet\ns map (_ + 2) // adds 2 to each element of the set\n\nval s = \"Hello World\"\ns filter (c => c.isUpper) // returns \"HW\"; strings can be treated as Seq[Char]\n\n// Operations on sequences\nval xs = List(...)\nxs.length   // number of elements, complexity O(n)\nxs.last     // last element (exception if xs is empty), complexity O(n)\nxs.init     // all elements of xs but the last (exception if xs is empty), complexity O(n)\nxs take n   // first n elements of xs\nxs drop n   // the rest of the collection after taking n elements\nxs(n)       // the nth element of xs, complexity O(n)\nxs ++ ys    // concatenation, complexity O(n)\nxs.reverse  // reverse the order, complexity O(n)\nxs updated(n, x)  // same list than xs, except at index n where it contains x, complexity O(n)\nxs indexOf x      // the index of the first element equal to x (-1 otherwise)\nxs contains x     // same as xs indexOf x >= 0\nxs filter p       // returns a list of the elements that satisfy the predicate p\nxs filterNot p    // filter with negated p \nxs partition p    // same as (xs filter p, xs filterNot p)\nxs takeWhile p    // the longest prefix consisting of elements that satisfy p\nxs dropWhile p    // the remainder of the list after any leading element satisfying p have been removed\nxs span p         // same as (xs takeWhile p, xs dropWhile p)\n\n   \n    \nxs exists p    // true if there is at least one element for which predicate p is true\nxs forall p    // true if p(x) is true for all elements\nxs zip ys      // returns a list of pairs which groups elements with same index together\nxs unzip       // opposite of zip: returns a pair of two lists\nxs.flatMap f   // applies the function to all elements and concatenates the result\nxs.sum         // sum of elements of the numeric collection\nxs.product     // product of elements of the numeric collection\nxs.max         // maximum of collection\nxs.min         // minimum of collection\nxs.flatten     // flattens a collection of collection into a single-level collection\nxs groupBy f   // returns a map which points to a list of elements\nxs distinct    // sequence of distinct entries (removes duplicates)\n\n\n\n//MAPS!!!\n// Operations on maps\nval myMap = Map(\"I\" -> 1, \"V\" -> 5, \"X\" -> 10)  // create a map\nmyMap(\"I\")      // => 1  \nmyMap(\"A\")      // => java.util.NoSuchElementException  \nmyMap get \"A\"   // => None \nmyMap get \"I\"   // => Some(1)\nmyMap.updated(\"V\", 15)  // returns a new map where \"V\" maps to 15 (entry is updated)\n                        // if the key (\"V\" here) does not exist, a new entry is added\n\n","user":"anonymous","dateUpdated":"2018-10-16T13:00:34+0200","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539687008550_-2045388242","id":"20181016-125008_33753755","dateCreated":"2018-10-16T12:50:08+0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:10858"}],"name":"Scala Intro 2","id":"2DT5V4A3D","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}